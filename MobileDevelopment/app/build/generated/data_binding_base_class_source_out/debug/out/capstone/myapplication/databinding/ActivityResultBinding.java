// Generated by view binder compiler. Do not edit!
package capstone.myapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import capstone.myapplication.R;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityResultBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final AppBarLayout appBarLayout;

  @NonNull
  public final ItemResultBinding itemResult;

  @NonNull
  public final Toolbar toolbarResult;

  @NonNull
  public final MaterialTextView toolbarTitle;

  private ActivityResultBinding(@NonNull CoordinatorLayout rootView,
      @NonNull AppBarLayout appBarLayout, @NonNull ItemResultBinding itemResult,
      @NonNull Toolbar toolbarResult, @NonNull MaterialTextView toolbarTitle) {
    this.rootView = rootView;
    this.appBarLayout = appBarLayout;
    this.itemResult = itemResult;
    this.toolbarResult = toolbarResult;
    this.toolbarTitle = toolbarTitle;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityResultBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityResultBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_result, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityResultBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.appBarLayout;
      AppBarLayout appBarLayout = rootView.findViewById(id);
      if (appBarLayout == null) {
        break missingId;
      }

      id = R.id.item_result;
      View itemResult = rootView.findViewById(id);
      if (itemResult == null) {
        break missingId;
      }
      ItemResultBinding binding_itemResult = ItemResultBinding.bind(itemResult);

      id = R.id.toolbarResult;
      Toolbar toolbarResult = rootView.findViewById(id);
      if (toolbarResult == null) {
        break missingId;
      }

      id = R.id.toolbarTitle;
      MaterialTextView toolbarTitle = rootView.findViewById(id);
      if (toolbarTitle == null) {
        break missingId;
      }

      return new ActivityResultBinding((CoordinatorLayout) rootView, appBarLayout,
          binding_itemResult, toolbarResult, toolbarTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
